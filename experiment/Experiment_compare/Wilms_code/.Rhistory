lambda2_min=0.1, lambda2_max=2, lambda2_steps=5)
toc()
write.csv(FIT$Beta_array,paste(namedir,"result_K",KKK,"_",density[dd],"percent_",itr,".csv",sep=""))
FIT$Beta_array
FIT$lambda1_opt
#### R-SCRIPT: Multi-class VAR estimation of Multi-Store sales application ####
rm(list=ls())
library("tictoc")
#### Set working directory to Directory "Code" ####
# In R: File --> Change dir...
# In RStudio: Session --> Set Working Directory --> Choose Directory
# Alternatively, specify the path in the setwd function and execute the following line
# setwd("...../Code") # Specify the path on .....
#### Check if all necessary packages are installed ####
checkpackage<-function(U){
if((U %in% rownames(installed.packages()))==F){
install.packages(U)
}
}
packagelist<-list("igraph","corrplot","ggplot2","scales","Matrix","MASS","magic","rARPACK","JGL","plyr","MTS")
lapply(packagelist,checkpackage)
# Load packages
suppressMessages(suppressWarnings(packages <- lapply(packagelist, FUN = function(x) {
library(x, character.only = TRUE)
})))
#### SOURCE FUNCTIONS ####
source('Functions/MultiClass_VAR.R')
source('Functions/BootSE.R')
source('Functions/FunctionsVisualTools.R')
#### IMPORT DATA ####
new=load("Data/Data.RData") # Array of dimension NxJxK=76x15x15
y = get(new)
namedir = "./data_R_formulationS/"
density = c(1,5)
TTT = 100
nnn = 20
KKK=5
dd=1
itr = 1
tmp = read.csv(file = paste(namedir,'K',KKK,'_data_',density[dd],'percent_',itr,'.csv',sep=""),header=FALSE)
Data = as.matrix(tmp)
dim(Data)<-c(TTT,nnn,KKK)
colnames(Data) <- NULL
#### Multi-class VAR FIT ####
tic("total fitting time")
FIT<-MultiClass_VAR(Data=Data, P=1)
toc()
write.csv(FIT$Beta_array,paste(namedir,"result_K",KKK,"_",density[dd],"percent_",itr,".csv",sep=""))
FIT$lambda1_opt
FIT$Beta_array
FIT$lambda2_opt
# Copyright 2017, Andrey Skripnikov, All rights reserved.
#setwd("/home/usdandres/Downloads/Revision/")
source("function.R")
set.seed(2)
source("./function.R")
#### R-SCRIPT: Multi-class VAR estimation of Multi-Store sales application ####
rm(list=ls())
library("tictoc")
#### Set working directory to Directory "Code" ####
# In R: File --> Change dir...
# In RStudio: Session --> Set Working Directory --> Choose Directory
# Alternatively, specify the path in the setwd function and execute the following line
# setwd("...../Code") # Specify the path on .....
#### Check if all necessary packages are installed ####
checkpackage<-function(U){
if((U %in% rownames(installed.packages()))==F){
install.packages(U)
}
}
packagelist<-list("igraph","corrplot","ggplot2","scales","Matrix","MASS","magic","rARPACK","JGL","plyr","MTS")
lapply(packagelist,checkpackage)
# Load packages
suppressMessages(suppressWarnings(packages <- lapply(packagelist, FUN = function(x) {
library(x, character.only = TRUE)
})))
#### SOURCE FUNCTIONS ####
source('Functions/MultiClass_VAR.R')
source('Functions/BootSE.R')
source('Functions/FunctionsVisualTools.R')
#### IMPORT DATA ####
new=load("Data/Data.RData") # Array of dimension NxJxK=76x15x15
y = get(new)
namedir = "./data_R_formulationS/"
density = c(1,5)
TTT = 100
nnn = 20
KKK=5
dd=2
itr = 1
tmp = read.csv(file = paste(namedir,'K',KKK,'_data_',density[dd],'percent_',itr,'.csv',sep=""),header=FALSE)
Data = as.matrix(tmp)
dim(Data)<-c(TTT,nnn,KKK)
colnames(Data) <- NULL
#### Multi-class VAR FIT ####
tic("total fitting time")
FIT<-MultiClass_VAR(Data=Data, P=1,lambda1_min=0.1, lambda1_max=50, lambda1_steps=5,
lambda2_min=0.1, lambda2_max=2, lambda2_steps=5)
toc()
#### R-SCRIPT: Multi-class VAR estimation of Multi-Store sales application ####
rm(list=ls())
library("tictoc")
#### Set working directory to Directory "Code" ####
# In R: File --> Change dir...
# In RStudio: Session --> Set Working Directory --> Choose Directory
# Alternatively, specify the path in the setwd function and execute the following line
# setwd("...../Code") # Specify the path on .....
#### Check if all necessary packages are installed ####
checkpackage<-function(U){
if((U %in% rownames(installed.packages()))==F){
install.packages(U)
}
}
packagelist<-list("igraph","corrplot","ggplot2","scales","Matrix","MASS","magic","rARPACK","JGL","plyr","MTS")
lapply(packagelist,checkpackage)
# Load packages
suppressMessages(suppressWarnings(packages <- lapply(packagelist, FUN = function(x) {
library(x, character.only = TRUE)
})))
#### SOURCE FUNCTIONS ####
source('Functions/MultiClass_VAR.R')
source('Functions/BootSE.R')
source('Functions/FunctionsVisualTools.R')
#### IMPORT DATA ####
new=load("Data/Data.RData") # Array of dimension NxJxK=76x15x15
y = get(new)
namedir = "./data_R_formulationS/"
density = c(1,5)
TTT = 100
nnn = 20
KKK=5
dd=1
itr = 1
tmp = read.csv(file = paste(namedir,'K',KKK,'_data_',density[dd],'percent_',itr,'.csv',sep=""),header=FALSE)
Data = as.matrix(tmp)
dim(Data)<-c(TTT,nnn,KKK)
colnames(Data) <- NULL
#### Multi-class VAR FIT ####
tic("total fitting time")
FIT<-MultiClass_VAR(Data=Data, P=1,lambda1_min=0.1, lambda1_max=50, lambda1_steps=5,
lambda2_min=0.1, lambda2_max=2, lambda2_steps=5)
toc()
FIT
names(FIT)
names(FIT$Beta_array)
names(FIT$Beta_new)
(FIT$Beta_new)
(FIT$Beta_array)
names(FIT)
FIT$gamma1_opt
FIT$gamma2_opt
FIT$omega_new_list
imagec(FIT$omega_new_list)
image(FIT$omega_new_list)
imagesc(FIT$omega_new_list)
plot.matrix(FIT$omega_new_list)
library('plot.matrix')
plot(FIT$omega_new_list)
typeof(FIT$omega_new_list)
typeof(FIT$omega_new_list[[1]])
plot(FIT$omega_new_list[[1]])
install.packages('plot.matrix')
plot.matrix(FIT$omega_new_list[[1]])
library('plot.matrix')
plot.matrix(FIT$omega_new_list[[1]])
plot.matrix
plot(FIT$omega_new_list[[1]])
plot(FIT$Beta_array[[1]])
plot(FIT$Beta_array[[,,1]])
plot(FIT$Beta_array[[,,,1]])
(FIT$Beta_array[[1]])
(FIT$Beta_array)
(FIT$Beta_array[,,1])
plit(FIT$Beta_array[,,1])
plot(FIT$Beta_array[,,1])
plot(abs(FIT$Beta_array[,,1])
)
plot(abs(FIT$Beta_array[,,2])
)
plot(abs(FIT$Beta_array[,,1]))
plot(abs(FIT$Beta_array[,,4]))
plot(abs(FIT$Beta_array[,,5]))
plot(abs(FIT$Beta_array[,,4]))
FIT$lambda1_opt
FIT$lambda2_opt
which(FIT$Beta_array==0)
which(FIT$Beta_array[[1]]==0)
which(FIT$Beta_array[,,1==0)
which(FIT$Beta_array[,,1]==0)
length(which(FIT$Beta_array[,,1]==0))
length(which((FIT$Beta_array[,,1]-FIT$Beta_array[,,2])==0))
length(which((FIT$Beta_array[,,1]-FIT$Beta_array[,,5])==0))
rm(list=ls())
library("tictoc")
#### Set working directory to Directory "Code" ####
# In R: File --> Change dir...
# In RStudio: Session --> Set Working Directory --> Choose Directory
# Alternatively, specify the path in the setwd function and execute the following line
# setwd("...../Code") # Specify the path on .....
#### Check if all necessary packages are installed ####
checkpackage<-function(U){
if((U %in% rownames(installed.packages()))==F){
install.packages(U)
}
}
packagelist<-list("igraph","corrplot","ggplot2","scales","Matrix","MASS","magic","rARPACK","JGL","plyr","MTS")
lapply(packagelist,checkpackage)
# Load packages
suppressMessages(suppressWarnings(packages <- lapply(packagelist, FUN = function(x) {
library(x, character.only = TRUE)
})))
#### SOURCE FUNCTIONS ####
source('Functions/MultiClass_VAR.R')
source('Functions/BootSE.R')
source('Functions/FunctionsVisualTools.R')
#### IMPORT DATA ####
new=load("Data/Data.RData") # Array of dimension NxJxK=76x15x15
y = get(new)
namedir = "./data_R_formulationS/"
density = c(1,5)
TTT = 100
nnn = 20
KKK=5
dd=1
itr = 1
tmp = read.csv(file = paste(namedir,'K',KKK,'_data_',density[dd],'percent_',itr,'.csv',sep=""),header=FALSE)
Data = as.matrix(tmp)
dim(Data)<-c(TTT,nnn,KKK)
colnames(Data) <- NULL
#### Multi-class VAR FIT ####
tic("total fitting time")
FIT<-MultiClass_VAR(Data=Data, P=1,lambda1_min=0.1, lambda1_max=50, lambda1_steps=5,
lambda2_min=0.1, lambda2_max=2, lambda2_steps=5,
gamma1_min=0.1, gamma1_max=1, gamma1_steps=3,
gamma2_min=0.1, gamma2_max=1, gamma2_steps=3,
criterion="AICc", type="AdLasso")
toc()
name(FIT)
names(FIT)
FIT$Beta_array
names(FIT)
FIT$lambda1_opt
FIT$lambda2_opt
FIT$gamma2_opt
FIT$gamma1_opt
tic("total fitting time")
FIT<-MultiClass_VAR(Data=Data, P=1,lambda1_min=50, lambda1_max=100, lambda1_steps=5,
lambda2_min=0.01, lambda2_max=0.1, lambda2_steps=5,
gamma1_min=0.01, gamma1_max=0.1, gamma1_steps=3,
gamma2_min=0.01, gamma2_max=0.1, gamma2_steps=3,
criterion="BIC", type="AdLasso")
# [50,0.1,0.1,0.1]
toc()
FIT$lambda1_opt
FIT$lambda2_opt
FIT$gamma2_opt
FIT$gamma1_opt
FIT<-MultiClass_VAR(Data=Data, P=1,lambda1_min=400, lambda1_max=500, lambda1_steps=5,
lambda2_min=0.001, lambda2_max=0.01, lambda2_steps=5,
gamma1_min=0.001, gamma1_max=0.01, gamma1_steps=3,
gamma2_min=0.001, gamma2_max=0.01, gamma2_steps=3,
criterion="BIC", type="AdLasso")
FIT$lambda1_opt
FIT$lambda2_opt
FIT$lambda3_opt
FIT$gamma1_opt
FIT$gamma2_opt
FIT<-MultiClass_VAR(Data=Data, P=1,lambda1_min=500, lambda1_max=800, lambda1_steps=5,
lambda2_min=0.01, lambda2_max=0.05, lambda2_steps=5,
gamma1_min=0.0001, gamma1_max=0.001, gamma1_steps=3,
gamma2_min=0.0001, gamma2_max=0.001, gamma2_steps=3,
criterion="BIC", type="AdLasso")
FIT$lambda1_opt
FIT$lambda2_opt
FIT$gamma1_opt
FIT$gamma2_opt
FIT$Beta_array
FIT<-MultiClass_VAR(Data=Data, P=1,lambda1_min=800, lambda1_max=1000, lambda1_steps=5,
lambda2_min=0.01, lambda2_max=0.05, lambda2_steps=5,
gamma1_min=0.001, gamma1_max=0.005, gamma1_steps=3,
gamma2_min=0.00001, gamma2_max=0.0001, gamma2_steps=3,
criterion="BIC", type="AdLasso")
FIT$lambda1_opt
FIT$lambda2_opt
FIT$gamma1_opt
FIT$gamma2_opt
names(FIT)
FIT$omega_new_list
#### Multi-class VAR FIT ####
tic("total fitting time")
FIT<-MultiClass_VAR(Data=Data, P=1,lambda1_min=1, lambda1_max=10, lambda1_steps=5,
lambda2_min=0.01, lambda2_max=5, lambda2_steps=5,
gamma1_min=20, gamma1_max=25, gamma1_steps=3,
gamma2_min=20, gamma2_max=25, gamma2_steps=3,
criterion="BIC", type="AdLasso")
# [50,0.1,0.1,0.1]
# [100 0.01 0.01 0.01]
# [500 0.01 0.001 0.001]
# [800 0.02 0.001 1e-4],  [500-800,0.01-0.05,1e-4-1e-3,1e-4-1e-3]
# [1000,0.05,0.003,1e-5], [800-1000,0.01-0.05,1e-3-5e-3,1e-5-1e-4]
toc()
FIT$lambda1_opt
FIT$omega_new_list
FIT$lambda2_opt
FIT$Beta_array
FIT<-MultiClass_VAR(Data=Data, P=1,lambda1_min=500, lambda1_max=1500, lambda1_steps=5,
lambda2_min=0.01, lambda2_max=5, lambda2_steps=5,
gamma1_min=20, gamma1_max=25, gamma1_steps=3,
gamma2_min=20, gamma2_max=25, gamma2_steps=3,
criterion="BIC", type="AdLasso")
FIT$lambda1_opt
FIT$lambda2_opt
FIT$gamma1_opt
FIT$gamma2_opt
FIT$Beta_array
tic("total fitting time")
FIT<-MultiClass_VAR(Data=Data, P=1,lambda1_min=500, lambda1_max=1000, lambda1_steps=5,
lambda2_min=0.01, lambda2_max=5, lambda2_steps=5,
gamma1_min=20, gamma1_max=25, gamma1_steps=3,
gamma2_min=20, gamma2_max=25, gamma2_steps=3,
criterion="BIC", type="AdLasso")
# [50,0.1,0.1,0.1]
# [100 0.01 0.01 0.01]
# [500 0.01 0.001 0.001]
# [800 0.02 0.001 1e-4],  [500-800,0.01-0.05,1e-4-1e-3,1e-4-1e-3]
# [1000,0.05,0.003,1e-5], [800-1000,0.01-0.05,1e-3-5e-3,1e-5-1e-4]
toc()
FIT$Beta_array
FIT$lambda1_opt
FIT$lambda2_opt
FIT$gamma1_opt
FIT$gamma2_opt
#### R-SCRIPT: Multi-class VAR estimation of Multi-Store sales application ####
rm(list=ls())
library("tictoc")
#### Set working directory to Directory "Code" ####
# In R: File --> Change dir...
# In RStudio: Session --> Set Working Directory --> Choose Directory
# Alternatively, specify the path in the setwd function and execute the following line
# setwd("...../Code") # Specify the path on .....
#### Check if all necessary packages are installed ####
checkpackage<-function(U){
if((U %in% rownames(installed.packages()))==F){
install.packages(U)
}
}
packagelist<-list("igraph","corrplot","ggplot2","scales","Matrix","MASS","magic","rARPACK","JGL","plyr","MTS")
lapply(packagelist,checkpackage)
# Load packages
suppressMessages(suppressWarnings(packages <- lapply(packagelist, FUN = function(x) {
library(x, character.only = TRUE)
})))
#### SOURCE FUNCTIONS ####
source('Functions/MultiClass_VAR.R')
source('Functions/BootSE.R')
source('Functions/FunctionsVisualTools.R')
#### IMPORT DATA ####
new=load("Data/Data.RData") # Array of dimension NxJxK=76x15x15
y = get(new)
namedir = "./data_R_formulationS/"
density = c(1,5)
TTT = 100
nnn = 20
KKK=5
dd=1
itr = 1
tmp = read.csv(file = paste(namedir,'K',KKK,'_data_',density[dd],'percent_',itr,'.csv',sep=""),header=FALSE)
Data = as.matrix(tmp)
dim(Data)<-c(TTT,nnn,KKK)
colnames(Data) <- NULL
tic("total fitting time")
FIT<-MultiClass_VAR(Data=Data, P=1,lambda1_min=500, lambda1_max=1000, lambda1_steps=5,
lambda2_min=0.01, lambda2_max=5, lambda2_steps=5,
gamma1_min=100, gamma1_max=100, gamma1_steps=1,
gamma2_min=100, gamma2_max=100, gamma2_steps=1,
criterion="BIC", type="AdLasso")
# [50,0.1,0.1,0.1]
# [100 0.01 0.01 0.01]
# [500 0.01 0.001 0.001]
# [800 0.02 0.001 1e-4],  [500-800,0.01-0.05,1e-4-1e-3,1e-4-1e-3]
# [1000,0.05,0.003,1e-5], [800-1000,0.01-0.05,1e-3-5e-3,1e-5-1e-4]
toc()
FIT$Beta_array
FIT$lambda1_opt
FIT$lambda2_opt
FIT$gamma2_opt
FIT$omega_new_list
tic("total fitting time")
FIT<-MultiClass_VAR(Data=Data, P=1,lambda1_min=500, lambda1_max=1000, lambda1_steps=5,
lambda2_min=0.01, lambda2_max=5, lambda2_steps=5,
gamma1_min=10, gamma1_max=10, gamma1_steps=1,
gamma2_min=10, gamma2_max=10, gamma2_steps=1,
criterion="BIC", type="AdLasso")
# [50,0.1,0.1,0.1]
# [100 0.01 0.01 0.01]
# [500 0.01 0.001 0.001]
# [800 0.02 0.001 1e-4],  [500-800,0.01-0.05,1e-4-1e-3,1e-4-1e-3]
# [1000,0.05,0.003,1e-5], [800-1000,0.01-0.05,1e-3-5e-3,1e-5-1e-4]
toc()
FIT$lambda1_opt
FIT$lambda2_opt
FIT$gamma1_opt
FIT$gamma2_opt
FIT$omega_new_list
FIT$lambda1_opt
FIT$lambda2_opt
FIT$gamma1_opt
FIT$gamma2_opt
lambda1_mn
lambda1_min
tic("total fitting time")
FIT<-MultiClass_VAR(Data=Data, P=1,lambda1_min=0.01, lambda1_max=1000, lambda1_steps=5,
lambda2_min=0.01, lambda2_max=0.05, lambda2_steps=5,
gamma1_min=10, gamma1_max=10, gamma1_steps=1,
gamma2_min=10, gamma2_max=10, gamma2_steps=1,
criterion="BIC", type="AdLasso")
# [50,0.1,0.1,0.1]
# [100 0.01 0.01 0.01]
# [500 0.01 0.001 0.001]
# [800 0.02 0.001 1e-4],  [500-800,0.01-0.05,1e-4-1e-3,1e-4-1e-3]
# [1000,0.05,0.003,1e-5], [800-1000,0.01-0.05,1e-3-5e-3,1e-5-1e-4]
toc()
FIT$lambda1_opt
FIT$lambda2_opt
FIT$gamma1_opt
FIT$gamma2_opt
tic("total fitting time")
FIT<-MultiClass_VAR(Data=Data, P=1,lambda1_min=0.01, lambda1_max=100, lambda1_steps=5,
lambda2_min=0.01, lambda2_max=0.05, lambda2_steps=5,
gamma1_min=10, gamma1_max=10, gamma1_steps=1,
gamma2_min=10, gamma2_max=10, gamma2_steps=1,
criterion="BIC", type="AdLasso")
# [50,0.1,0.1,0.1]
# [100 0.01 0.01 0.01]
# [500 0.01 0.001 0.001]
# [800 0.02 0.001 1e-4],  [500-800,0.01-0.05,1e-4-1e-3,1e-4-1e-3]
# [1000,0.05,0.003,1e-5], [800-1000,0.01-0.05,1e-3-5e-3,1e-5-1e-4]
toc()
FIT$lambda1_opt
FIT$lambda2_opt
FIT$gamma1_opt
FIT$gamma2_opt
tic("total fitting time")
FIT<-MultiClass_VAR(Data=Data, P=1,lambda1_min=400, lambda1_max=900, lambda1_steps=5,
lambda2_min=0.01, lambda2_max=0.05, lambda2_steps=5,
gamma1_min=10, gamma1_max=10, gamma1_steps=1,
gamma2_min=10, gamma2_max=10, gamma2_steps=1,
criterion="BIC", type="AdLasso")
# [50,0.1,0.1,0.1]
# [100 0.01 0.01 0.01]
# [500 0.01 0.001 0.001]
# [800 0.02 0.001 1e-4],  [500-800,0.01-0.05,1e-4-1e-3,1e-4-1e-3]
# [1000,0.05,0.003,1e-5], [800-1000,0.01-0.05,1e-3-5e-3,1e-5-1e-4]
toc()
FIT$lambda1_opt
FIT$lambda2_opt
FIT$gamma1_opt
FIT$gamma2_opt
FIT$omega_new_list
tic("total fitting time")
FIT<-MultiClass_VAR(Data=Data, P=1,lambda1_min=50, lambda1_max=500, lambda1_steps=20,
lambda2_min=0.01, lambda2_max=0.01, lambda2_steps=1,
gamma1_min=10, gamma1_max=10, gamma1_steps=1,
gamma2_min=0, gamma2_max=0, gamma2_steps=1,
criterion="BIC", type="AdLasso")
# [50,0.1,0.1,0.1]
# [100 0.01 0.01 0.01]
# [500 0.01 0.001 0.001]
# [800 0.02 0.001 1e-4],  [500-800,0.01-0.05,1e-4-1e-3,1e-4-1e-3]
# [1000,0.05,0.003,1e-5], [800-1000,0.01-0.05,1e-3-5e-3,1e-5-1e-4]
toc()
FIT$omega_new_list
FIT$lambda1_opt
FIT$lambda2_opt
FIT$gamma1_opt
FIT$gamma2_opt
FIT$Beta_array
size(FIT$Beta_array)
sizeof(FIT$Beta_array)
dim(FIT$Beta_array)
FIT$[,,1]
FIT$Beta_array[,,1]
ggplot(FIT$Beta_array[,,1])
library(SparseM)
install.packages(SparseM)
library(SparseM)
install.package(SparseM)
install.packages("SparseM")
llibrary("SparseM")
library("SparseM")
image(as.matrix.csr(FIT$Beta_array[,,1])) # plot it :)
image(as.matrix.csr(FIT$Beta_array[,,2])) # plot it :)
image(as.matrix.csr(FIT$Beta_array[,,3])) # plot it :)
image(as.matrix.csr(FIT$Beta_array[,,4])) # plot it :)
image(as.matrix.csr(FIT$Beta_array[,,5])) # plot it :)
tic("total fitting time")
FIT<-MultiClass_VAR(Data=Data, P=1,lambda1_min=50, lambda1_max=900, lambda1_steps=20,
lambda2_min=0.01, lambda2_max=0.01, lambda2_steps=1,
gamma1_min=10, gamma1_max=10, gamma1_steps=1,
gamma2_min=0, gamma2_max=0, gamma2_steps=1,
criterion="BIC", type="AdLasso")
# [50,0.1,0.1,0.1]
# [100 0.01 0.01 0.01]
# [500 0.01 0.001 0.001]
# [800 0.02 0.001 1e-4],  [500-800,0.01-0.05,1e-4-1e-3,1e-4-1e-3]
# [1000,0.05,0.003,1e-5], [800-1000,0.01-0.05,1e-3-5e-3,1e-5-1e-4]
toc()
FIT$lambda1_opt
FIT$lambda2_opt
FIT$gamma1_opt
FIT$gamma2_opt
image(as.matrix.csr(FIT$Beta_array[,,1])) # plot it :)
